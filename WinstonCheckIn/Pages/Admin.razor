@using WinstonCheckIn.Services
@using MudBlazor
@using System.ComponentModel
@page "/admin"
@inject HttpClient Http
@inject AuthenticationStateService AuthStateService
@inject NavigationManager Navigation
@inject CheckInService CheckInService
@inject LoginService LoginService
@implements IDisposable

<PageTitle>Admin</PageTitle>

<h1>Admin Dashboard</h1>

@if (!AuthStateService.IsAuthenticated)
{
    <div class="mt-4">
        <h3>Admin Login</h3>
        
        @if (errorMessage != null)
        {
            <div class="alert alert-danger">@errorMessage</div>
        }
        
        <div class="mb-3">
            <label class="form-label">Username:</label>
            <input @bind="username" class="form-control" />
        </div>
        <div class="mb-3">
            <label class="form-label">Password:</label>
            <input type="password" @bind="password" class="form-control" />
        </div>
        <MudButton Variant="Variant.Filled" 
                  Color="Color.Primary" 
                  Size="Size.Small"
                  @onclick="HandleLogin">
            Login
        </MudButton>
    </div>
}
else
{
    <p>Welcome to the admin panel, @AuthStateService.CurrentUser! You have successfully logged in.</p>

<div class="mt-4">
    @foreach (var record in CheckInService.CheckInRecords)
    {
                        <div class="d-flex align-items-center py-1 px-0" style="border-bottom: 1px solid #e0e0e0;">
                    <div class="flex-grow-1 d-flex align-items-center justify-content-between">
                        <div class="d-flex align-items-center">
                            <span style="font-size: 14px;">
                                <strong>@record.FirstName @record.LastName</strong> - @record.Phone
                            </span>
                            <MudChip T="string" Color="@(record.IsPaid ? Color.Success : Color.Error)" 
                                    Size="Size.Small" 
                                    Variant="Variant.Filled"
                                    Class="ms-2">
                                @(record.IsPaid ? "Paid" : "Unpaid")
                            </MudChip>
                            @if (!string.IsNullOrEmpty(record.SignatureData))
                            {
                                <MudButton Variant="Variant.Text" 
                                          Color="Color.Info" 
                                          Size="Size.Small"
                                          StartIcon="Icons.Material.Filled.Signature"
                                          @onclick="@(() => ShowSignature(record.SignatureData, $"{record.FirstName} {record.LastName}"))"
                                          Class="ms-1">
                                    Signature
                                </MudButton>
                            }
                        </div>
                        <div class="d-flex align-items-center">
                            <MudButton Variant="Variant.Text" 
                                      Color="Color.Primary" 
                                      Size="Size.Small"
                                      StartIcon="Icons.Material.Filled.Edit"
                                      @onclick="@(() => TogglePaymentStatus(CheckInService.CheckInRecords.ToList().IndexOf(record)))">
                                Toggle
                            </MudButton>
                            @if (record.FirstName != "Organizer")
                            {
                                <MudButton Variant="Variant.Text" 
                                          Color="Color.Error" 
                                          Size="Size.Small"
                                          StartIcon="Icons.Material.Filled.Delete"
                                          @onclick="@(async () => await DeleteRecord(CheckInService.CheckInRecords.ToList().IndexOf(record)))">
                                    Delete
                                </MudButton>
                            }
                        </div>
                    </div>
                </div>
    }
</div>

<div class="mt-4">
    <MudButton Variant="Variant.Filled" 
              Color="Color.Secondary" 
              Size="Size.Small"
              StartIcon="Icons.Material.Filled.Logout"
              @onclick="Logout">
        Logout
    </MudButton>
</div>
}

@code {
    [Inject] IDialogService DialogService { get; set; } = default!;
    
    private string username = string.Empty;
    private string password = string.Empty;
    private string? errorMessage;

    protected override void OnInitialized()
    {
        CheckInService.PropertyChanged += OnCheckInServiceChanged;
        AuthStateService.PropertyChanged += OnAuthStateChanged;
    }

    private void OnCheckInServiceChanged(object? sender, PropertyChangedEventArgs e)
    {
        InvokeAsync(StateHasChanged);
    }

    private void OnAuthStateChanged(object? sender, PropertyChangedEventArgs e)
    {
        InvokeAsync(StateHasChanged);
    }

    private void HandleLogin()
    {
        if (LoginService.Authenticate(username, password))
        {
            // Login successful, page will update automatically
        }
        else
        {
            errorMessage = "Invalid username or password.";
        }
    }

    private void TogglePaymentStatus(int index)
    {
        var record = CheckInService.CheckInRecords[index];
        CheckInService.UpdatePaymentStatus(index, !record.IsPaid);
    }

    private async Task DeleteRecord(int index)
    {
        var record = CheckInService.CheckInRecords[index];
        var parameters = new DialogParameters<MudMessageBox>
        {
            { x => x.Title, "Confirm Delete" },
            { x => x.Message, $"Are you sure you want to delete the record for {record.FirstName} {record.LastName}? This action cannot be undone." },
            { x => x.YesText, "Delete" },
            { x => x.NoText, "Cancel" }
        };

        var options = new DialogOptions() 
        { 
            CloseButton = true, 
            MaxWidth = MaxWidth.Small 
        };

        var dialog = await DialogService.ShowAsync<MudMessageBox>("Delete Record", parameters, options);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            CheckInService.RemoveCheckIn(index);
        }
    }

    private void Logout()
    {
        AuthStateService.Logout();
        Navigation.NavigateTo("/");
    }

    private async Task ShowSignature(string signatureData, string personName)
    {
        var parameters = new DialogParameters<SignatureDialog>
        {
            { x => x.SignatureData, signatureData },
            { x => x.PersonName, personName }
        };

        var options = new DialogOptions() 
        { 
            CloseButton = true, 
            MaxWidth = MaxWidth.Medium,
            FullWidth = true
        };

        await DialogService.ShowAsync<SignatureDialog>($"Signature - {personName}", parameters, options);
    }

    public void Dispose()
    {
        CheckInService.PropertyChanged -= OnCheckInServiceChanged;
        AuthStateService.PropertyChanged -= OnAuthStateChanged;
    }
}
