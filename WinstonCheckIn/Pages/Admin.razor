@using WinstonCheckIn.Services
@using MudBlazor
@using System.ComponentModel
@page "/admin"
@inject HttpClient Http
@inject AuthenticationStateService AuthStateService
@inject NavigationManager Navigation
@inject CheckInService CheckInService
@implements IDisposable

<PageTitle>Admin</PageTitle>

@if (!AuthStateService.IsAuthenticated)
{
    <MudContainer MaxWidth="MaxWidth.Medium" Class="mt-8">
        <MudCard>
            <MudCardContent>
                <MudText Typo="Typo.h4" Class="mb-4">Access Denied</MudText>
                <MudText Class="mb-4">You must be logged in as an administrator to access this page.</MudText>
                <MudButton Variant="Variant.Filled" 
                          Color="Color.Primary" 
                          StartIcon="Icons.Material.Filled.Login"
                          @onclick="@(() => Navigation.NavigateTo("/"))">
                    Go to Login
                </MudButton>
            </MudCardContent>
        </MudCard>
    </MudContainer>
}
else
{
    <h1>Admin Dashboard</h1>

    <p>Welcome to the admin panel, @AuthStateService.CurrentUser! You have successfully logged in.</p>

<MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="mt-4">
    <MudCard>
        <MudCardHeader>
            <CardHeaderContent>
                <MudText Typo="Typo.h6">Check-In Records</MudText>
            </CardHeaderContent>
        </MudCardHeader>
        <MudCardContent>
            <MudTable Items="@CheckInService.CheckInRecords" Hover="true" Striped="true" Dense="true">
                <HeaderContent>
                    <MudTh>First Name</MudTh>
                    <MudTh>Last Name</MudTh>
                    <MudTh>Phone</MudTh>
                    <MudTh>Paid</MudTh>
                    <MudTh>Actions</MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTd DataLabel="First Name">@context.FirstName</MudTd>
                    <MudTd DataLabel="Last Name">@context.LastName</MudTd>
                    <MudTd DataLabel="Phone">@context.Phone</MudTd>
                    <MudTd DataLabel="Paid">
                        <MudChip T="string" Color="@(context.IsPaid ? Color.Success : Color.Error)" 
                                Size="Size.Small" 
                                Variant="Variant.Filled">
                            @(context.IsPaid ? "Yes" : "No")
                        </MudChip>
                    </MudTd>
                    <MudTd DataLabel="Actions">
                        <MudButton Variant="Variant.Text" 
                                  Color="Color.Primary" 
                                  Size="Size.Small"
                                  StartIcon="Icons.Material.Filled.Edit"
                                  @onclick="@(() => TogglePaymentStatus(CheckInService.CheckInRecords.ToList().IndexOf(context)))">
                            Toggle Payment
                        </MudButton>
                        <MudButton Variant="Variant.Text" 
                                  Color="Color.Error" 
                                  Size="Size.Small"
                                  StartIcon="Icons.Material.Filled.Delete"
                                  @onclick="@(async () => await DeleteRecord(CheckInService.CheckInRecords.ToList().IndexOf(context)))">
                            Delete
                        </MudButton>
                    </MudTd>
                </RowTemplate>
            </MudTable>
        </MudCardContent>
    </MudCard>
</MudContainer>

<div class="mt-4">
    <MudButton Variant="Variant.Filled" 
              Color="Color.Secondary" 
              StartIcon="Icons.Material.Filled.Logout"
              @onclick="Logout">
        Logout
    </MudButton>
</div>
}

@code {
    [Inject] IDialogService DialogService { get; set; } = default!;

    protected override void OnInitialized()
    {
        CheckInService.PropertyChanged += OnCheckInServiceChanged;
        AuthStateService.PropertyChanged += OnAuthStateChanged;
    }

    private void OnCheckInServiceChanged(object? sender, PropertyChangedEventArgs e)
    {
        InvokeAsync(StateHasChanged);
    }

    private void OnAuthStateChanged(object? sender, PropertyChangedEventArgs e)
    {
        InvokeAsync(StateHasChanged);
    }

    private void TogglePaymentStatus(int index)
    {
        var record = CheckInService.CheckInRecords[index];
        CheckInService.UpdatePaymentStatus(index, !record.IsPaid);
    }

    private async Task DeleteRecord(int index)
    {
        var record = CheckInService.CheckInRecords[index];
        var parameters = new DialogParameters<MudMessageBox>
        {
            { x => x.Title, "Confirm Delete" },
            { x => x.Message, $"Are you sure you want to delete the record for {record.FirstName} {record.LastName}? This action cannot be undone." },
            { x => x.YesText, "Delete" },
            { x => x.NoText, "Cancel" }
        };

        var options = new DialogOptions() 
        { 
            CloseButton = true, 
            MaxWidth = MaxWidth.Small 
        };

        var dialog = await DialogService.ShowAsync<MudMessageBox>("Delete Record", parameters, options);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            CheckInService.RemoveCheckIn(index);
        }
    }

    private void Logout()
    {
        AuthStateService.Logout();
        Navigation.NavigateTo("/");
    }

    public void Dispose()
    {
        CheckInService.PropertyChanged -= OnCheckInServiceChanged;
        AuthStateService.PropertyChanged -= OnAuthStateChanged;
    }
}
