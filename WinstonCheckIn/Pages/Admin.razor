@using WinstonCheckIn.Services
@using MudBlazor
@using System.ComponentModel
@using System.Text
@using Microsoft.JSInterop
@page "/admin"
@inject HttpClient Http
@inject AuthenticationStateService AuthStateService
@inject NavigationManager Navigation
@inject CheckInService CheckInService
@inject LoginService LoginService
@inject IJSRuntime JSRuntime
@implements IDisposable

<PageTitle>Admin</PageTitle>

<h1>Admin Dashboard</h1>

@if (!AuthStateService.IsAuthenticated)
{
    <div class="mt-4">
        <h3>Admin Login</h3>
        
        @if (errorMessage != null)
        {
            <div class="alert alert-danger">@errorMessage</div>
        }
        
        <div class="mb-3">
            <label class="form-label">Username:</label>
            <input @bind="username" class="form-control" />
        </div>
        <div class="mb-3">
            <label class="form-label">Password:</label>
            <input type="password" @bind="password" class="form-control" />
        </div>
        <MudButton Variant="Variant.Filled" 
                  Color="Color.Primary" 
                  Size="Size.Small"
                  @onclick="HandleLogin">
            Login
        </MudButton>
    </div>
}
else
{
    <p>Welcome to the admin panel, @AuthStateService.CurrentUser! You have successfully logged in.</p>

<div class="mt-4">
    <MudButton Variant="Variant.Filled" 
              Color="Color.Info" 
              Size="Size.Medium"
              StartIcon="Icons.Material.Filled.Print"
              @onclick="PrintAllRecords"
              Class="me-3">
        Print All Records
    </MudButton>
    <MudButton Variant="Variant.Filled" 
              Color="Color.Secondary" 
              Size="Size.Medium"
              StartIcon="Icons.Material.Filled.Logout"
              @onclick="Logout">
        Logout
    </MudButton>
</div>

<div class="mt-4">
    @foreach (var record in CheckInService.CheckInRecords)
    {
                        <div class="d-flex align-items-center py-1 px-0" style="border-bottom: 1px solid #e0e0e0;">
                    <div class="flex-grow-1 d-flex align-items-center justify-content-between">
                        <div class="d-flex align-items-center">
                            <span style="font-size: 14px;">
                                <strong>@record.FirstName @record.LastName</strong> - @record.Phone
                            </span>
                            <MudChip T="string" Color="@(record.IsPaid ? Color.Success : Color.Error)" 
                                    Size="Size.Small" 
                                    Variant="Variant.Filled"
                                    Class="ms-2">
                                @(record.IsPaid ? "Paid" : "Unpaid")
                            </MudChip>
                            @if (!string.IsNullOrEmpty(record.SignatureData))
                            {
                                <MudButton Variant="Variant.Text" 
                                          Color="Color.Info" 
                                          Size="Size.Small"
                                          StartIcon="Icons.Material.Filled.Signature"
                                          @onclick="@(() => ShowSignature(record.SignatureData, $"{record.FirstName} {record.LastName}"))"
                                          Class="ms-1">
                                    Signature
                                </MudButton>
                            }
                        </div>
                        <div class="d-flex align-items-center">
                            <MudButton Variant="Variant.Text" 
                                      Color="Color.Primary" 
                                      Size="Size.Small"
                                      StartIcon="Icons.Material.Filled.Edit"
                                      @onclick="@(() => TogglePaymentStatus(CheckInService.CheckInRecords.ToList().IndexOf(record)))">
                                Toggle
                            </MudButton>
                            <MudButton Variant="Variant.Text" 
                                      Color="Color.Error" 
                                      Size="Size.Small"
                                      StartIcon="Icons.Material.Filled.Delete"
                                      @onclick="@(async () => await DeleteRecord(CheckInService.CheckInRecords.ToList().IndexOf(record)))">
                                Delete
                            </MudButton>
                        </div>
                    </div>
                </div>
    }
</div>
}

@code {
    [Inject] IDialogService DialogService { get; set; } = default!;
    
    private string username = string.Empty;
    private string password = string.Empty;
    private string? errorMessage;

    protected override void OnInitialized()
    {
        CheckInService.PropertyChanged += OnCheckInServiceChanged;
        AuthStateService.PropertyChanged += OnAuthStateChanged;
    }

    private void OnCheckInServiceChanged(object? sender, PropertyChangedEventArgs e)
    {
        InvokeAsync(StateHasChanged);
    }

    private void OnAuthStateChanged(object? sender, PropertyChangedEventArgs e)
    {
        InvokeAsync(StateHasChanged);
    }

    private void HandleLogin()
    {
        if (LoginService.Authenticate(username, password))
        {
            // Login successful, page will update automatically
        }
        else
        {
            errorMessage = "Invalid username or password.";
        }
    }

    private async Task TogglePaymentStatus(int index)
    {
        var record = CheckInService.CheckInRecords[index];
        await CheckInService.TogglePaymentStatus(index);
    }

    private async Task DeleteRecord(int index)
    {
        var record = CheckInService.CheckInRecords[index];
        var parameters = new DialogParameters<MudMessageBox>
        {
            { x => x.Title, "Confirm Delete" },
            { x => x.Message, $"Are you sure you want to delete the record for {record.FirstName} {record.LastName}? This action cannot be undone." },
            { x => x.YesText, "Delete" },
            { x => x.NoText, "Cancel" }
        };

        var options = new DialogOptions() 
        { 
            CloseButton = true, 
            MaxWidth = MaxWidth.Small 
        };

        var dialog = await DialogService.ShowAsync<MudMessageBox>("Delete Record", parameters, options);
        var result = await dialog.Result;

        if (result != null && !result.Canceled && result.Data != null && (bool)result.Data)
        {
            await CheckInService.RemoveCheckIn(index);
        }
    }

    private void Logout()
    {
        AuthStateService.Logout();
        Navigation.NavigateTo("/");
    }

    private async Task ShowSignature(string signatureData, string personName)
    {
        var parameters = new DialogParameters<SignatureDialog>
        {
            { x => x.SignatureData, signatureData },
            { x => x.PersonName, personName }
        };

        var options = new DialogOptions() 
        { 
            CloseButton = true, 
            MaxWidth = MaxWidth.Medium,
            FullWidth = true
        };

        await DialogService.ShowAsync<SignatureDialog>($"Signature - {personName}", parameters, options);
    }

    private async Task PrintAllRecords()
    {
        var printContent = GenerateAllRecordsPrintContent();
        await JSRuntime.InvokeVoidAsync("printContent", printContent, "All Check-In Records");
    }

    private string GenerateAllRecordsPrintContent()
    {
        var html = new StringBuilder();
        
        html.AppendLine("<!DOCTYPE html>");
        html.AppendLine("<html>");
        html.AppendLine("<head>");
        html.AppendLine("<title>All Check-In Records</title>");
        html.AppendLine("<style>");
        html.AppendLine("body { font-family: Arial, sans-serif; margin: 3px; padding: 0; line-height: 1.1; font-size: 11px; }");
        html.AppendLine(".header { text-align: center; border-bottom: 1px solid #333; padding-bottom: 3px; margin-bottom: 5px; }");
        html.AppendLine(".header h1 { font-size: 14px; margin: 0; }");
        html.AppendLine(".waiver-section { margin-bottom: 15px; padding: 8px; border: 1px solid #ccc; background-color: #f9f9f9; }");
        html.AppendLine(".waiver-section h3 { font-size: 12px; margin: 0 0 5px 0; text-decoration: underline; }");
        html.AppendLine(".waiver-section p { margin: 3px 0; font-size: 10px; }");
        html.AppendLine(".records-section h3 { font-size: 12px; margin: 10px 0 5px 0; text-decoration: underline; }");
        html.AppendLine(".record { margin-bottom: 3px; padding: 2px; }");
        html.AppendLine(".signature { max-width: 45px; max-height: 18px; border: 1px solid #ccc; vertical-align: middle; }");
        html.AppendLine("@media print { body { margin: 2px; padding: 0; } .no-print { display: none; } .signature { border: none !important; outline: none !important; } }");
        html.AppendLine("</style>");
        html.AppendLine("</head>");
        html.AppendLine("<body>");
        html.AppendLine("<div class=\"header\">");
        html.AppendLine("<h1>Winston Check-In Records</h1>");
        html.AppendLine("<p>Salt Creek Rural Park District</p>");
        html.AppendLine("</div>");
        
        // Add waiver text
        html.AppendLine("<div class=\"waiver-section\">");
        html.AppendLine("<h3>Waiver & Release Agreement</h3>");
        html.AppendLine("<p><strong>SALT CREEK RURAL PARK DISTRICT'S WAIVER & RELEASE OF ALL CLAIMS</strong></p>");
        html.AppendLine("<p>Please read this form carefully and be aware that in registering yourself or your minor child/ward for participation in Salt Creek Rural Park District's programs you will be waiving any and all claims for injuries you or your child ward might sustain.</p>");
        html.AppendLine("<p>I acknowledge that there are certain risks of physical injury to participants in the Salt Creek Park District's programs, and I agree to assume the full risk of any such injuries, damages or loss regardless of severity which I or my child ward may sustain as a result of participating in any activities connected or associated with any such programs.</p>");
        html.AppendLine("<p>I hereby fully release and discharge the Park District, its officers, agents, servants and employees from any and all claims from injuries, damage or loss which may occur due to the participation of myself or my child ward in any Salt Creek Rural Park District programs.</p>");
        html.AppendLine("<p>I further agree to defend, indemnify and hold harmless the Park District its officers, agents, servants and employees from any and all claims resulting from injuries, damages and losses sustained or arising out of, connected with or in any way associated with the activities of any programs that myself or my child/ward participated in.</p>");
        html.AppendLine("<p>I also understand that photographs and videos are periodically taken of participants while they are engaged in programs, special events and park activities. I give my permission to Salt Creek Park District to use these photos in future publications.</p>");
        html.AppendLine("<p><strong>THE SALT CREEK RURAL PARK DISTRICT HAS MY PERMISSION TO OBTAIN EMERGENCY MEDICAL ATTENTION WHEN REQUIRED. I HAVE READ AND FULLY UNDERSTAND THE ABOVE DETAILS AND WAIVER, I RELEASE ALL CLAIMS.</strong></p>");
        html.AppendLine("</div>");
        
        html.AppendLine("<div class=\"records-section\">");
        html.AppendLine("<h3>Check-In Records</h3>");
        
        foreach (var record in CheckInService.CheckInRecords)
        {
            html.AppendLine("<div class=\"record\">");
            html.Append(record.FirstName + " " + record.LastName + " - " + record.Phone);
            
            if (!string.IsNullOrEmpty(record.SignatureData))
            {
                html.Append(" - <img src=\"" + record.SignatureData + "\" class=\"signature\" />");
            }
            else
            {
                html.Append(" - No signature");
            }
            
            html.AppendLine("</div>");
        }
        
        html.AppendLine("</div>"); // Close records-section
        
        html.AppendLine("</body>");
        html.AppendLine("</html>");
        
        return html.ToString();
    }


    public void Dispose()
    {
        CheckInService.PropertyChanged -= OnCheckInServiceChanged;
        AuthStateService.PropertyChanged -= OnAuthStateChanged;
    }
}
